#!/usr/bin/env node

const authenticate = require('./github-authentication')
const { program } = require('commander')

program
  .option('-d, --debug', 'enable extreme logging')
  .option('--dry-run', 'prevent actual commit of the updated version.json to github')
  .requiredOption('--deliverino-private-key <deliverino-private-key>', 'private key of the deliverino github app in pem format with base64 encoding')
  .requiredOption('--owner <owner>', 'owner of the current repository, usually "Integreat"')
  .requiredOption('--repo <repo>', 'the current repository, usually "integreat-webapp" or "integreat-react-native-app"')
  .requiredOption('--branch <branch>', 'the current branch')
  .requiredOption('--commit-sha <commit-sha>', 'the sha1 of the current commit')
  .requiredOption('--new-version <new-version>', 'the new version name')

const moveReleaseNotes = async (newVersion, { deliverinoPrivateKey, owner, repo, branch, commitSha }) => {
  const appOctokit = await authenticate({ deliverinoPrivateKey, owner, repo })
  // const versionFileContent = await appOctokit.repos.getContents({ owner, repo, path: releaseNotePath, ref: branch })
  // console.log(versionFileContent)

  const commit = await appOctokit.git.getCommit({ owner, repo, commit_sha: commitSha })
  console.log('commit', commit)

  const rootTreeSha = commit.data.tree.sha
  const rootTree = await appOctokit.git.getTree({ owner, repo, tree_sha: rootTreeSha })
  console.log('tree', rootTree)

  console.log('tree tree', rootTree.data.tree)
  const releaseNoteTreeSha = rootTree.data.tree.find(it => it.path === 'release-notes').sha
  console.log('releaseNoteTreeSha', releaseNoteTreeSha)
  const releaseNoteTree = await appOctokit.git.getTree({ owner, repo, tree_sha: releaseNoteTreeSha })
  console.log('releaseNoteTree', releaseNoteTree)

  const { size, url, ...rest } = releaseNoteTree.data.tree.find(it => it.path === 'unreleased')
  const dirChanges = [{ ...rest, path: newVersion }]
  console.log(dirChanges)

  console.log('movedFiles', dirChanges)
  const newTree = await appOctokit.git.createTree({ owner, repo, tree: dirChanges, base_tree: releaseNoteTreeSha })
  console.log(newTree)

  // const { versionCode, versionName } = newVersion
  // const contentBase64 = Buffer.from(JSON.stringify(newVersion)).toString('base64')
  //
  // const message = versionCode
  //   ? `Bump version name to ${versionName} and version code to ${versionCode}\n[skip ci]`
  //   : `Bump version name to ${versionName}\n[skip ci]`
  //
  // await appOctokit.repos.createOrUpdateFile({
  //   owner,
  //   repo,
  //   path: versionFile,
  //   content: contentBase64,
  //   branch,
  //   message,
  //   sha: versionFileContent.data.sha
  // })
  //
  // console.debug(`Bumped version successfully commited with message "${message}"`)
}

program
  .command('move')
  .description('move the release notes in <release-note-path> to the subdirectory <new-version>')
  .action(async () => {
    try {
      const { dryRun, newVersion, deliverinoPrivateKey, owner, repo, branch, commitSha } = program
      if (!dryRun) {
        if (!deliverinoPrivateKey) {
          throw new Error('deliverino private key not specified')
        } else if (!owner) {
          throw new Error('owner not specified')
        } else if (!repo) {
          throw new Error('repo not specified')
        } else if (!branch) {
          throw new Error('branch not specified')
        }
      }

      if (!dryRun) {
        await moveReleaseNotes(newVersion, { deliverinoPrivateKey, owner, repo, branch, commitSha })
      }
    } catch (e) {
      console.error(e)
      process.exit(1)
    }
  })

program.parse(process.argv)
